{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"da-vislib \u00b6 Skeleton for D&A's new visualizations library. Placeholder for description to come at a later point. Documentation: https://itera.github.io/da-vislib GitHub: https://github.com/itera/da-vislib PyPI: https://pypi.org/project/da-vislib/ Free software: MIT Features \u00b6 TODO Installation \u00b6 pip install da-vislib Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#da-vislib","text":"Skeleton for D&A's new visualizations library. Placeholder for description to come at a later point. Documentation: https://itera.github.io/da-vislib GitHub: https://github.com/itera/da-vislib PyPI: https://pypi.org/project/da-vislib/ Free software: MIT","title":"da-vislib"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#installation","text":"pip install da-vislib","title":"Installation"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for da-vislib. da_vislib \u00b6 Main module. hello_world () \u00b6 Generators have a Yields section instead of a Returns section. Parameters: Name Type Description Default n int The upper limit of the range to generate, from 0 to n - 1. required Yields int: The next number in the range of 0 to n - 1. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> print ([ i for i in example_generator ( 4 )]) [ 0 , 1 , 2 , 3 ] Source code in da_vislib\\da_vislib.py def hello_world () -> str : \"\"\"Generators have a ``Yields`` section instead of a ``Returns`` section. Args: n (int): The upper limit of the range to generate, from 0 to `n` - 1. Yields: int: The next number in the range of 0 to `n` - 1. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> print([i for i in example_generator(4)]) [0, 1, 2, 3] \"\"\" return \"Hello World!\"","title":"Modules"},{"location":"api/#da_vislib.da_vislib","text":"Main module.","title":"da_vislib"},{"location":"api/#da_vislib.da_vislib.hello_world","text":"Generators have a Yields section instead of a Returns section. Parameters: Name Type Description Default n int The upper limit of the range to generate, from 0 to n - 1. required Yields int: The next number in the range of 0 to n - 1. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> print ([ i for i in example_generator ( 4 )]) [ 0 , 1 , 2 , 3 ] Source code in da_vislib\\da_vislib.py def hello_world () -> str : \"\"\"Generators have a ``Yields`` section instead of a ``Returns`` section. Args: n (int): The upper limit of the range to generate, from 0 to `n` - 1. Yields: int: The next number in the range of 0 to `n` - 1. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> print([i for i in example_generator(4)]) [0, 1, 2, 3] \"\"\" return \"Hello World!\"","title":"hello_world()"},{"location":"changelog/","text":"Changelog \u00b6 0.2.1 (2021-12-08) \u00b6 Fixed a package dependency issue. Added guidelines for semantic commit messages in documentation. 0.2.0 (2021-12-08) \u00b6 New feature (testing purposes): hello_world() 0.1.0 (2021-12-01) \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#021-2021-12-08","text":"Fixed a package dependency issue. Added guidelines for semantic commit messages in documentation.","title":"0.2.1 (2021-12-08)"},{"location":"changelog/#020-2021-12-08","text":"New feature (testing purposes): hello_world()","title":"0.2.0 (2021-12-08)"},{"location":"changelog/#010-2021-12-01","text":"First release on PyPI.","title":"0.1.0 (2021-12-01)"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/itera/da-vislib/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 da-vislib could always use more documentation, whether as part of the official da-vislib docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/itera/da-vislib/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up da-vislib for local development. Fork the da-vislib repo on GitHub. Clone your fork locally git clone git@github.com:your_name_here/da-vislib.git Ensure Poetry and Pyenv is installed (see this section for instructions). Skip if already installed. Install dependencies and start your virtualenv: poetry install -E test -E doc -E dev Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: poetry run tox Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/itera/da-vislib/actions and make sure that the tests pass for all supported Python versions. Semantic Commit Messages Guidelines \u00b6 The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. Format: <type>(<scope>): <subject> <scope> is optional (ie. , , ) Example \u00b6 feat: add hat wobble ^--^ ^------------^ | | | +-> Summary in present tense. | +-------> Type: chore, docs, feat, fix, refactor, style, or test. More Examples: feat : (new feature for the user, not a new feature for build script) fix : (bug fix for the user, not a fix to a build script) docs : (changes to the documentation) style : (formatting, missing semi colons, etc; no production code change) refactor : (refactoring production code, eg. renaming a variable) test : (adding missing tests, refactoring tests; no production code change) chore : (updating grunt tasks etc; no production code change) revert : (reverting a commit) References: https://www.conventionalcommits.org/ https://seesparkbox.com/foundry/semantic_commit_messages http://karma-runner.github.io/1.0/dev/git-commit-msg.html Tips \u00b6 poetry run pytest tests/test_da_vislib.py To run a subset of tests. Or poetry run python -m pytest --pyargs da_vislib tests/ To run all tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. For more in depth instructions, see the 'Release Checklist'. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: poetry run bump2version patch # possible: major / minor / patch git push git push --tags GitHub Actions will then deploy to PyPI if tests pass. Installing PyEnv and Poetry \u00b6 TODO: add instructions for linux and windows","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/itera/da-vislib/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"da-vislib could always use more documentation, whether as part of the official da-vislib docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/itera/da-vislib/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up da-vislib for local development. Fork the da-vislib repo on GitHub. Clone your fork locally git clone git@github.com:your_name_here/da-vislib.git Ensure Poetry and Pyenv is installed (see this section for instructions). Skip if already installed. Install dependencies and start your virtualenv: poetry install -E test -E doc -E dev Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: poetry run tox Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/itera/da-vislib/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#semantic-commit-messages-guidelines","text":"The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. Format: <type>(<scope>): <subject> <scope> is optional (ie. , , )","title":"Semantic Commit Messages Guidelines"},{"location":"contributing/#example","text":"feat: add hat wobble ^--^ ^------------^ | | | +-> Summary in present tense. | +-------> Type: chore, docs, feat, fix, refactor, style, or test. More Examples: feat : (new feature for the user, not a new feature for build script) fix : (bug fix for the user, not a fix to a build script) docs : (changes to the documentation) style : (formatting, missing semi colons, etc; no production code change) refactor : (refactoring production code, eg. renaming a variable) test : (adding missing tests, refactoring tests; no production code change) chore : (updating grunt tasks etc; no production code change) revert : (reverting a commit) References: https://www.conventionalcommits.org/ https://seesparkbox.com/foundry/semantic_commit_messages http://karma-runner.github.io/1.0/dev/git-commit-msg.html","title":"Example"},{"location":"contributing/#tips","text":"poetry run pytest tests/test_da_vislib.py To run a subset of tests. Or poetry run python -m pytest --pyargs da_vislib tests/ To run all tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. For more in depth instructions, see the 'Release Checklist'. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: poetry run bump2version patch # possible: major / minor / patch git push git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"contributing/#installing-pyenv-and-poetry","text":"TODO: add instructions for linux and windows","title":"Installing PyEnv and Poetry"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install da-vislib, run this command in your terminal: pip install da-vislib This is the preferred method to install da-vislib, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for da-vislib can be downloaded from the Github repo . You can either clone the public repository: git clone git://github.com/henriklg/da-vislib Or download the tarball : curl -OJL https://github.com/henriklg/da-vislib/tarball/master Once you have a copy of the source, you can install it with: pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install da-vislib, run this command in your terminal: pip install da-vislib This is the preferred method to install da-vislib, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for da-vislib can be downloaded from the Github repo . You can either clone the public repository: git clone git://github.com/henriklg/da-vislib Or download the tarball : curl -OJL https://github.com/henriklg/da-vislib/tarball/master Once you have a copy of the source, you can install it with: pip install .","title":"From source"},{"location":"pypi_release_checklist/","text":"PyPI Release Checklist \u00b6 For Every Release: \u00b6 Make some pull requests, merge all changes from feature branch to master/main. Update CHANGELOG.md manually. Make sure it follows the Keep a Changelog standard. Be noticed that GitHub workflow will read changelog and extract release notes automatically. Commit the changelog changes: git add CHANGELOG.md git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number and automatically create a commit, tag(can also be patch or major). poetry run bump2version minor Run the tests locally for insurance: poetry run tox Push these commits to master/main: git push Before proceeding to the next step, please check workflows triggered by this push have passed. Push the tags(created by bump2version) to master/main, creating the new release on both GitHub and PyPI: git push --tags Only tag name started with 'v'(lower case) will leverage GitHub release workflow. Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If tox test passed, this should be ok, since we have already run twine check during tox test. Update documentation: poetry run mkdocs gh-deploy","title":"Release Checklist"},{"location":"pypi_release_checklist/#pypi-release-checklist","text":"","title":"PyPI Release Checklist"},{"location":"pypi_release_checklist/#for-every-release","text":"Make some pull requests, merge all changes from feature branch to master/main. Update CHANGELOG.md manually. Make sure it follows the Keep a Changelog standard. Be noticed that GitHub workflow will read changelog and extract release notes automatically. Commit the changelog changes: git add CHANGELOG.md git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number and automatically create a commit, tag(can also be patch or major). poetry run bump2version minor Run the tests locally for insurance: poetry run tox Push these commits to master/main: git push Before proceeding to the next step, please check workflows triggered by this push have passed. Push the tags(created by bump2version) to master/main, creating the new release on both GitHub and PyPI: git push --tags Only tag name started with 'v'(lower case) will leverage GitHub release workflow. Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If tox test passed, this should be ok, since we have already run twine check during tox test. Update documentation: poetry run mkdocs gh-deploy","title":"For Every Release:"},{"location":"usage/","text":"Usage \u00b6 To use da-vislib in a project import da_vislib","title":"Usage"},{"location":"usage/#usage","text":"To use da-vislib in a project import da_vislib","title":"Usage"}]}